// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dictation_asr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dictation_asr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace speech {
namespace v1 {
class RecognizeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognizeRequest>
     _instance;
} _RecognizeRequest_default_instance_;
class StreamingRecognizeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognizeRequest>
     _instance;
  const ::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config_;
  ::google::protobuf::internal::ArenaStringPtr audio_content_;
} _StreamingRecognizeRequest_default_instance_;
class StreamingRecognitionConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognitionConfig>
     _instance;
} _StreamingRecognitionConfig_default_instance_;
class RecognitionConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognitionConfig>
     _instance;
} _RecognitionConfig_default_instance_;
class SpeechContextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpeechContext>
     _instance;
} _SpeechContext_default_instance_;
class ConfigFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConfigField>
     _instance;
} _ConfigField_default_instance_;
class RecognitionAudioDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognitionAudio>
     _instance;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
} _RecognitionAudio_default_instance_;
class RecognizeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognizeResponse>
     _instance;
} _RecognizeResponse_default_instance_;
class StreamingRecognizeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognizeResponse>
     _instance;
} _StreamingRecognizeResponse_default_instance_;
class StreamingRecognitionResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognitionResult>
     _instance;
} _StreamingRecognitionResult_default_instance_;
class SpeechRecognitionResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionResult>
     _instance;
} _SpeechRecognitionResult_default_instance_;
class SpeechRecognitionAlternativeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionAlternative>
     _instance;
} _SpeechRecognitionAlternative_default_instance_;
class WordInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WordInfo>
     _instance;
} _WordInfo_default_instance_;
class RecognitionLatticeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognitionLattice>
     _instance;
} _RecognitionLattice_default_instance_;
class LatticeEdgeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LatticeEdge>
     _instance;
} _LatticeEdge_default_instance_;

namespace protobuf_dictation_5fasr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, audio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(StreamingRecognizeRequestDefaultTypeInternal, streaming_config_),
  offsetof(StreamingRecognizeRequestDefaultTypeInternal, audio_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognizeRequest, streaming_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionConfig, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionConfig, single_utterance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionConfig, interim_results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, language_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, max_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, profanity_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, speech_contexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, enable_word_time_offsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, enable_automatic_punctuation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, config_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, use_enhanced_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechContext, phrases_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionAudio, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RecognitionAudioDefaultTypeInternal, content_),
  offsetof(RecognitionAudioDefaultTypeInternal, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionAudio, audio_source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognizeResponse, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognizeResponse, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognizeResponse, speech_event_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionResult, alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionResult, is_final_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionResult, stability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionResult, result_finalization_cause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingRecognitionResult, lattice_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRecognitionResult, alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRecognitionResult, lattice_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRecognitionAlternative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRecognitionAlternative, transcript_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRecognitionAlternative, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechRecognitionAlternative, words_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordInfo, word_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionLattice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionLattice, final_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionLattice, edges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeEdge, start_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeEdge, end_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeEdge, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeEdge, language_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeEdge, acoustic_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeEdge, duration_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RecognizeRequest)},
  { 7, -1, sizeof(StreamingRecognizeRequest)},
  { 15, -1, sizeof(StreamingRecognitionConfig)},
  { 23, -1, sizeof(RecognitionConfig)},
  { 39, -1, sizeof(SpeechContext)},
  { 45, -1, sizeof(ConfigField)},
  { 52, -1, sizeof(RecognitionAudio)},
  { 60, -1, sizeof(RecognizeResponse)},
  { 66, -1, sizeof(StreamingRecognizeResponse)},
  { 74, -1, sizeof(StreamingRecognitionResult)},
  { 84, -1, sizeof(SpeechRecognitionResult)},
  { 91, -1, sizeof(SpeechRecognitionAlternative)},
  { 99, -1, sizeof(WordInfo)},
  { 107, -1, sizeof(RecognitionLattice)},
  { 114, -1, sizeof(LatticeEdge)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingRecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingRecognitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeechContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognitionAudio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingRecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamingRecognitionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeechRecognitionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeechRecognitionAlternative_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WordInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognitionLattice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatticeEdge_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dictation_asr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  _RecognizeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognizeRequest_default_instance_);_StreamingRecognizeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StreamingRecognizeRequest_default_instance_);_StreamingRecognitionConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StreamingRecognitionConfig_default_instance_);_RecognitionConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognitionConfig_default_instance_);_SpeechContext_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpeechContext_default_instance_);_ConfigField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConfigField_default_instance_);_RecognitionAudio_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognitionAudio_default_instance_);_RecognizeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognizeResponse_default_instance_);_StreamingRecognizeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StreamingRecognizeResponse_default_instance_);_StreamingRecognitionResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StreamingRecognitionResult_default_instance_);_SpeechRecognitionResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpeechRecognitionResult_default_instance_);_SpeechRecognitionAlternative_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpeechRecognitionAlternative_default_instance_);_WordInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WordInfo_default_instance_);_RecognitionLattice_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognitionLattice_default_instance_);_LatticeEdge_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LatticeEdge_default_instance_);_RecognizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1::RecognitionConfig*>(
      ::google::cloud::speech::v1::RecognitionConfig::internal_default_instance());
  _RecognizeRequest_default_instance_._instance.get_mutable()->audio_ = const_cast< ::google::cloud::speech::v1::RecognitionAudio*>(
      ::google::cloud::speech::v1::RecognitionAudio::internal_default_instance());
  _StreamingRecognizeRequest_default_instance_.streaming_config_ = const_cast< ::google::cloud::speech::v1::StreamingRecognitionConfig*>(
      ::google::cloud::speech::v1::StreamingRecognitionConfig::internal_default_instance());
  _StreamingRecognizeRequest_default_instance_.audio_content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _StreamingRecognitionConfig_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1::RecognitionConfig*>(
      ::google::cloud::speech::v1::RecognitionConfig::internal_default_instance());
  _RecognitionAudio_default_instance_.content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RecognitionAudio_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _StreamingRecognizeResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  _WordInfo_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _WordInfo_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023dictation_asr.proto\022\026google.cloud.spee"
      "ch.v1\032\034google/api/annotations.proto\032\036goo"
      "gle/protobuf/duration.proto\032\027google/rpc/"
      "status.proto\"\206\001\n\020RecognizeRequest\0229\n\006con"
      "fig\030\001 \001(\0132).google.cloud.speech.v1.Recog"
      "nitionConfig\0227\n\005audio\030\002 \001(\0132(.google.clo"
      "ud.speech.v1.RecognitionAudio\"\231\001\n\031Stream"
      "ingRecognizeRequest\022N\n\020streaming_config\030"
      "\001 \001(\01322.google.cloud.speech.v1.Streaming"
      "RecognitionConfigH\000\022\027\n\raudio_content\030\002 \001"
      "(\014H\000B\023\n\021streaming_request\"\212\001\n\032StreamingR"
      "ecognitionConfig\0229\n\006config\030\001 \001(\0132).googl"
      "e.cloud.speech.v1.RecognitionConfig\022\030\n\020s"
      "ingle_utterance\030\002 \001(\010\022\027\n\017interim_results"
      "\030\003 \001(\010\"\304\004\n\021RecognitionConfig\022I\n\010encoding"
      "\030\001 \001(\01627.google.cloud.speech.v1.Recognit"
      "ionConfig.AudioEncoding\022\031\n\021sample_rate_h"
      "ertz\030\002 \001(\005\022\025\n\rlanguage_code\030\003 \001(\t\022\030\n\020max"
      "_alternatives\030\004 \001(\005\022\030\n\020profanity_filter\030"
      "\005 \001(\010\022>\n\017speech_contexts\030\006 \003(\0132%.google."
      "cloud.speech.v1.SpeechContext\022 \n\030enable_"
      "word_time_offsets\030\010 \001(\010\022$\n\034enable_automa"
      "tic_punctuation\030\013 \001(\010\022:\n\rconfig_fields\030\014"
      " \003(\0132#.google.cloud.speech.v1.ConfigFiel"
      "d\022\r\n\005model\030\r \001(\t\022\024\n\014use_enhanced\030\016 \001(\010\"\224"
      "\001\n\rAudioEncoding\022\030\n\024ENCODING_UNSPECIFIED"
      "\020\000\022\014\n\010LINEAR16\020\001\022\010\n\004FLAC\020\002\022\t\n\005MULAW\020\003\022\007\n"
      "\003AMR\020\004\022\n\n\006AMR_WB\020\005\022\014\n\010OGG_OPUS\020\006\022\032\n\026SPEE"
      "X_WITH_HEADER_BYTE\020\007\022\007\n\003MP3\020\010\" \n\rSpeechC"
      "ontext\022\017\n\007phrases\030\001 \003(\t\")\n\013ConfigField\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"D\n\020Recognitio"
      "nAudio\022\021\n\007content\030\001 \001(\014H\000\022\r\n\003uri\030\002 \001(\tH\000"
      "B\016\n\014audio_source\"U\n\021RecognizeResponse\022@\n"
      "\007results\030\002 \003(\0132/.google.cloud.speech.v1."
      "SpeechRecognitionResult\"\261\002\n\032StreamingRec"
      "ognizeResponse\022!\n\005error\030\001 \001(\0132\022.google.r"
      "pc.Status\022C\n\007results\030\002 \003(\01322.google.clou"
      "d.speech.v1.StreamingRecognitionResult\022]"
      "\n\021speech_event_type\030\004 \001(\0162B.google.cloud"
      ".speech.v1.StreamingRecognizeResponse.Sp"
      "eechEventType\"L\n\017SpeechEventType\022\034\n\030SPEE"
      "CH_EVENT_UNSPECIFIED\020\000\022\033\n\027END_OF_SINGLE_"
      "UTTERANCE\020\001\"\341\003\n\032StreamingRecognitionResu"
      "lt\022J\n\014alternatives\030\001 \003(\01324.google.cloud."
      "speech.v1.SpeechRecognitionAlternative\022\020"
      "\n\010is_final\030\002 \001(\010\022\021\n\tstability\030\003 \001(\002\022m\n\031r"
      "esult_finalization_cause\030\004 \001(\0162J.google."
      "cloud.speech.v1.StreamingRecognitionResu"
      "lt.ResultFinalizationCause\022;\n\007lattice\030\005 "
      "\003(\0132*.google.cloud.speech.v1.Recognition"
      "Lattice\"\245\001\n\027ResultFinalizationCause\022)\n%R"
      "ESULT_FINALIZATION_CAUSE_UNSPECIFIED\020\000\022\013"
      "\n\007SUCCESS\020\001\022\024\n\020NO_INPUT_TIMEOUT\020\002\022\023\n\017SUC"
      "CESS_MAXTIME\020\003\022\021\n\rPARTIAL_MATCH\020\004\022\024\n\020NO_"
      "MATCH_MAXTIME\020\005\"\242\001\n\027SpeechRecognitionRes"
      "ult\022J\n\014alternatives\030\001 \003(\01324.google.cloud"
      ".speech.v1.SpeechRecognitionAlternative\022"
      ";\n\007lattice\030\005 \003(\0132*.google.cloud.speech.v"
      "1.RecognitionLattice\"w\n\034SpeechRecognitio"
      "nAlternative\022\022\n\ntranscript\030\001 \001(\t\022\022\n\nconf"
      "idence\030\002 \001(\002\022/\n\005words\030\003 \003(\0132 .google.clo"
      "ud.speech.v1.WordInfo\"t\n\010WordInfo\022-\n\nsta"
      "rt_time\030\001 \001(\0132\031.google.protobuf.Duration"
      "\022+\n\010end_time\030\002 \001(\0132\031.google.protobuf.Dur"
      "ation\022\014\n\004word\030\003 \001(\t\"]\n\022RecognitionLattic"
      "e\022\023\n\013final_nodes\030\001 \003(\005\0222\n\005edges\030\002 \003(\0132#."
      "google.cloud.speech.v1.LatticeEdge\"\203\001\n\013L"
      "atticeEdge\022\022\n\nstart_node\030\001 \001(\005\022\020\n\010end_no"
      "de\030\002 \001(\005\022\016\n\006symbol\030\003 \001(\t\022\025\n\rlanguage_cos"
      "t\030\004 \001(\002\022\025\n\racoustic_cost\030\005 \001(\002\022\020\n\010durati"
      "on\030\006 \001(\0052\220\002\n\006Speech\022\201\001\n\tRecognize\022(.goog"
      "le.cloud.speech.v1.RecognizeRequest\032).go"
      "ogle.cloud.speech.v1.RecognizeResponse\"\037"
      "\202\323\344\223\002\031\"\024/v1/speech:recognize:\001*\022\201\001\n\022Stre"
      "amingRecognize\0221.google.cloud.speech.v1."
      "StreamingRecognizeRequest\0322.google.cloud"
      ".speech.v1.StreamingRecognizeResponse\"\000("
      "\0010\001Bl\n\032com.google.cloud.speech.v1B\013Speec"
      "hProtoP\001Z<google.golang.org/genproto/goo"
      "gleapis/cloud/speech/v1;speech\370\001\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dictation_asr.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dictation_5fasr_2eproto

const ::google::protobuf::EnumDescriptor* RecognitionConfig_AudioEncoding_descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_enum_descriptors[0];
}
bool RecognitionConfig_AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecognitionConfig_AudioEncoding RecognitionConfig::ENCODING_UNSPECIFIED;
const RecognitionConfig_AudioEncoding RecognitionConfig::LINEAR16;
const RecognitionConfig_AudioEncoding RecognitionConfig::FLAC;
const RecognitionConfig_AudioEncoding RecognitionConfig::MULAW;
const RecognitionConfig_AudioEncoding RecognitionConfig::AMR;
const RecognitionConfig_AudioEncoding RecognitionConfig::AMR_WB;
const RecognitionConfig_AudioEncoding RecognitionConfig::OGG_OPUS;
const RecognitionConfig_AudioEncoding RecognitionConfig::SPEEX_WITH_HEADER_BYTE;
const RecognitionConfig_AudioEncoding RecognitionConfig::MP3;
const RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MIN;
const RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MAX;
const int RecognitionConfig::AudioEncoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamingRecognizeResponse_SpeechEventType_descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_enum_descriptors[1];
}
bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_EVENT_UNSPECIFIED;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::END_OF_SINGLE_UTTERANCE;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MIN;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MAX;
const int StreamingRecognizeResponse::SpeechEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamingRecognitionResult_ResultFinalizationCause_descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_enum_descriptors[2];
}
bool StreamingRecognitionResult_ResultFinalizationCause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::RESULT_FINALIZATION_CAUSE_UNSPECIFIED;
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::SUCCESS;
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::NO_INPUT_TIMEOUT;
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::SUCCESS_MAXTIME;
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::PARTIAL_MATCH;
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::NO_MATCH_MAXTIME;
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::ResultFinalizationCause_MIN;
const StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::ResultFinalizationCause_MAX;
const int StreamingRecognitionResult::ResultFinalizationCause_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RecognizeRequest::_slow_mutable_config() {
  config_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionConfig >(
      GetArenaNoVirtual());
}
::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::_slow_release_config() {
  if (config_ == NULL) {
    return NULL;
  } else {
    ::google::cloud::speech::v1::RecognitionConfig* temp = new ::google::cloud::speech::v1::RecognitionConfig(*config_);
    config_ = NULL;
    return temp;
  }
}
::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.RecognizeRequest.config)
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void RecognizeRequest::_slow_set_allocated_config(
    ::google::protobuf::Arena* message_arena, ::google::cloud::speech::v1::RecognitionConfig** config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*config) == NULL) {
      message_arena->Own(*config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*config)) {
      ::google::cloud::speech::v1::RecognitionConfig* new_config = 
            ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionConfig >(
            message_arena);
      new_config->CopyFrom(**config);
      *config = new_config;
    }
}
void RecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.config)
}
void RecognizeRequest::_slow_mutable_audio() {
  audio_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionAudio >(
      GetArenaNoVirtual());
}
::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::_slow_release_audio() {
  if (audio_ == NULL) {
    return NULL;
  } else {
    ::google::cloud::speech::v1::RecognitionAudio* temp = new ::google::cloud::speech::v1::RecognitionAudio(*audio_);
    audio_ = NULL;
    return temp;
  }
}
::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.RecognizeRequest.audio)
  
  ::google::cloud::speech::v1::RecognitionAudio* temp = audio_;
  audio_ = NULL;
  return temp;
}
void RecognizeRequest::_slow_set_allocated_audio(
    ::google::protobuf::Arena* message_arena, ::google::cloud::speech::v1::RecognitionAudio** audio) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*audio) == NULL) {
      message_arena->Own(*audio);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*audio)) {
      ::google::cloud::speech::v1::RecognitionAudio* new_audio = 
            ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionAudio >(
            message_arena);
      new_audio->CopyFrom(**audio);
      *audio = new_audio;
    }
}
void RecognizeRequest::unsafe_arena_set_allocated_audio(
    ::google::cloud::speech::v1::RecognitionAudio* audio) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_;
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.audio)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kConfigFieldNumber;
const int RecognizeRequest::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_audio()) {
    audio_ = new ::google::cloud::speech::v1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&config_)) + sizeof(audio_));
  _cached_size_ = 0;
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
}

void RecognizeRequest::ArenaDtor(void* object) {
  RecognizeRequest* _this = reinterpret_cast< RecognizeRequest* >(object);
  (void)_this;
}
void RecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeRequest::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeRequest& RecognizeRequest::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognizeRequest* RecognizeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognizeRequest>(arena);
}

void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) {
    delete audio_;
  }
  audio_ = NULL;
  _internal_metadata_.Clear();
}

bool RecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1.RecognitionAudio audio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognizeRequest)
  return false;
#undef DO_
}

void RecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->audio_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognizeRequest)
}

::google::protobuf::uint8* RecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_, deterministic, target);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->audio_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.has_audio()) {
    mutable_audio()->::google::cloud::speech::v1::RecognitionAudio::MergeFrom(from.audio());
  }
}

void RecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognizeRequest::UnsafeArenaSwap(RecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(audio_, other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeRequest::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeRequest

// .google.cloud.speech.v1.RecognitionConfig config = 1;
bool RecognizeRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void RecognizeRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::cloud::speech::v1::RecognitionConfig& RecognizeRequest::config() const {
  const ::google::cloud::speech::v1::RecognitionConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig*>(
      &::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::mutable_config() {
  
  if (config_ == NULL) {
    _slow_mutable_config();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeRequest.config)
  return config_;
}
::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeRequest.config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_config();
  } else {
    ::google::cloud::speech::v1::RecognitionConfig* temp = config_;
    config_ = NULL;
    return temp;
  }
}
 void RecognizeRequest::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config != NULL) {
    _slow_set_allocated_config(message_arena, &config);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeRequest.config)
}

// .google.cloud.speech.v1.RecognitionAudio audio = 2;
bool RecognizeRequest::has_audio() const {
  return this != internal_default_instance() && audio_ != NULL;
}
void RecognizeRequest::clear_audio() {
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) delete audio_;
  audio_ = NULL;
}
const ::google::cloud::speech::v1::RecognitionAudio& RecognizeRequest::audio() const {
  const ::google::cloud::speech::v1::RecognitionAudio* p = audio_;
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeRequest.audio)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::speech::v1::RecognitionAudio*>(
      &::google::cloud::speech::v1::_RecognitionAudio_default_instance_);
}
::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::mutable_audio() {
  
  if (audio_ == NULL) {
    _slow_mutable_audio();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeRequest.audio)
  return audio_;
}
::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::release_audio() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeRequest.audio)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_audio();
  } else {
    ::google::cloud::speech::v1::RecognitionAudio* temp = audio_;
    audio_ = NULL;
    return temp;
  }
}
 void RecognizeRequest::set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* audio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audio_;
  }
  if (audio != NULL) {
    _slow_set_allocated_audio(message_arena, &audio);
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeRequest.audio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognizeRequest::kStreamingConfigFieldNumber;
const int StreamingRecognizeRequest::kAudioContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognizeRequest::StreamingRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(const StreamingRecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}

void StreamingRecognizeRequest::SharedCtor() {
  clear_has_streaming_request();
  _cached_size_ = 0;
}

StreamingRecognizeRequest::~StreamingRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeRequest)
  SharedDtor();
}

void StreamingRecognizeRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingRecognizeRequest::ArenaDtor(void* object) {
  StreamingRecognizeRequest* _this = reinterpret_cast< StreamingRecognizeRequest* >(object);
  (void)_this;
}
void StreamingRecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognizeRequest::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognizeRequest& StreamingRecognizeRequest::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingRecognizeRequest* StreamingRecognizeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognizeRequest>(arena);
}

void StreamingRecognizeRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  switch (streaming_request_case()) {
    case kStreamingConfig: {
      if (GetArenaNoVirtual() == NULL) {
        delete streaming_request_.streaming_config_;
      }
      break;
    }
    case kAudioContent: {
      streaming_request_.audio_content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear();
}

bool StreamingRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streaming_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognizeRequest)
  return false;
#undef DO_
}

void StreamingRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  if (has_streaming_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *streaming_request_.streaming_config_, output);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->audio_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognizeRequest)
}

::google::protobuf::uint8* StreamingRecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  if (has_streaming_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *streaming_request_.streaming_config_, deterministic, target);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->audio_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeRequest)
  return target;
}

size_t StreamingRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (streaming_request_case()) {
    // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
    case kStreamingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *streaming_request_.streaming_config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognizeRequest)
    MergeFrom(*source);
  }
}

void StreamingRecognizeRequest::MergeFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamingRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeRequest::CopyFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeRequest::IsInitialized() const {
  return true;
}

void StreamingRecognizeRequest::Swap(StreamingRecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognizeRequest::UnsafeArenaSwap(StreamingRecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognizeRequest::InternalSwap(StreamingRecognizeRequest* other) {
  using std::swap;
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognizeRequest::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingRecognizeRequest

// .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
bool StreamingRecognizeRequest::has_streaming_config() const {
  return streaming_request_case() == kStreamingConfig;
}
void StreamingRecognizeRequest::set_has_streaming_config() {
  _oneof_case_[0] = kStreamingConfig;
}
void StreamingRecognizeRequest::clear_streaming_config() {
  if (has_streaming_config()) {
    if (GetArenaNoVirtual() == NULL) {
      delete streaming_request_.streaming_config_;
    }
    clear_has_streaming_request();
  }
}
 const ::google::cloud::speech::v1::StreamingRecognitionConfig& StreamingRecognizeRequest::streaming_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  return has_streaming_config()
      ? *streaming_request_.streaming_config_
      : ::google::cloud::speech::v1::StreamingRecognitionConfig::default_instance();
}
::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::mutable_streaming_config() {
  if (!has_streaming_config()) {
    clear_streaming_request();
    set_has_streaming_config();
    streaming_request_.streaming_config_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::StreamingRecognitionConfig >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  return streaming_request_.streaming_config_;
}
::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::release_streaming_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  if (has_streaming_config()) {
    clear_has_streaming_request();
    if (GetArenaNoVirtual() != NULL) {
      ::google::cloud::speech::v1::StreamingRecognitionConfig* temp = new ::google::cloud::speech::v1::StreamingRecognitionConfig(*streaming_request_.streaming_config_);
      streaming_request_.streaming_config_ = NULL;
      return temp;
    } else {
      ::google::cloud::speech::v1::StreamingRecognitionConfig* temp = streaming_request_.streaming_config_;
      streaming_request_.streaming_config_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void StreamingRecognizeRequest::set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config) {
  clear_streaming_request();
  if (streaming_config) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(streaming_config) == NULL) {
      GetArenaNoVirtual()->Own(streaming_config);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(streaming_config)) {
      ::google::cloud::speech::v1::StreamingRecognitionConfig* new_streaming_config = 
          ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::StreamingRecognitionConfig >(
          GetArenaNoVirtual());
      new_streaming_config->CopyFrom(*streaming_config);
      streaming_config = new_streaming_config;
    }
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
}
 ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::unsafe_arena_release_streaming_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  if (has_streaming_config()) {
    clear_has_streaming_request();
    ::google::cloud::speech::v1::StreamingRecognitionConfig* temp = streaming_request_.streaming_config_;
    streaming_request_.streaming_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void StreamingRecognizeRequest::unsafe_arena_set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config) {
  clear_streaming_request();
  if (streaming_config) {
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
}

// bytes audio_content = 2;
bool StreamingRecognizeRequest::has_audio_content() const {
  return streaming_request_case() == kAudioContent;
}
void StreamingRecognizeRequest::set_has_audio_content() {
  _oneof_case_[0] = kAudioContent;
}
void StreamingRecognizeRequest::clear_audio_content() {
  if (has_audio_content()) {
    streaming_request_.audio_content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_streaming_request();
  }
}
const ::std::string& StreamingRecognizeRequest::audio_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  if (has_audio_content()) {
    return streaming_request_.audio_content_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void StreamingRecognizeRequest::set_audio_content(const ::std::string& value) {
  if (!has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
#if LANG_CXX11
void StreamingRecognizeRequest::set_audio_content(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  if (!has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
#endif
void StreamingRecognizeRequest::set_audio_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
void StreamingRecognizeRequest::set_audio_content(const void* value,
                             size_t size) {
  if (!has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
::std::string* StreamingRecognizeRequest::mutable_audio_content() {
  if (!has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return streaming_request_.audio_content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
::std::string* StreamingRecognizeRequest::release_audio_content() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  if (has_audio_content()) {
    clear_has_streaming_request();
    return streaming_request_.audio_content_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* StreamingRecognizeRequest::unsafe_arena_release_audio_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_audio_content()) {
    clear_has_streaming_request();
    return streaming_request_.audio_content_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void StreamingRecognizeRequest::set_allocated_audio_content(::std::string* audio_content) {
  if (!has_audio_content()) {
    streaming_request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_streaming_request();
  if (audio_content != NULL) {
    set_has_audio_content();
    streaming_request_.audio_content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_content,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
void StreamingRecognizeRequest::unsafe_arena_set_allocated_audio_content(::std::string* audio_content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_audio_content()) {
    streaming_request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_streaming_request();
  if (audio_content) {
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_content, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}

bool StreamingRecognizeRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
void StreamingRecognizeRequest::clear_has_streaming_request() {
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
StreamingRecognizeRequest::StreamingRequestCase StreamingRecognizeRequest::streaming_request_case() const {
  return StreamingRecognizeRequest::StreamingRequestCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamingRecognitionConfig::_slow_mutable_config() {
  config_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionConfig >(
      GetArenaNoVirtual());
}
::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::_slow_release_config() {
  if (config_ == NULL) {
    return NULL;
  } else {
    ::google::cloud::speech::v1::RecognitionConfig* temp = new ::google::cloud::speech::v1::RecognitionConfig(*config_);
    config_ = NULL;
    return temp;
  }
}
::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void StreamingRecognitionConfig::_slow_set_allocated_config(
    ::google::protobuf::Arena* message_arena, ::google::cloud::speech::v1::RecognitionConfig** config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*config) == NULL) {
      message_arena->Own(*config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*config)) {
      ::google::cloud::speech::v1::RecognitionConfig* new_config = 
            ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionConfig >(
            message_arena);
      new_config->CopyFrom(**config);
      *config = new_config;
    }
}
void StreamingRecognitionConfig::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognitionConfig::kConfigFieldNumber;
const int StreamingRecognitionConfig::kSingleUtteranceFieldNumber;
const int StreamingRecognitionConfig::kInterimResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognitionConfig::StreamingRecognitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(const StreamingRecognitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  ::memcpy(&single_utterance_, &from.single_utterance_,
    static_cast<size_t>(reinterpret_cast<char*>(&interim_results_) -
    reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}

void StreamingRecognitionConfig::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interim_results_) -
      reinterpret_cast<char*>(&config_)) + sizeof(interim_results_));
  _cached_size_ = 0;
}

StreamingRecognitionConfig::~StreamingRecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionConfig)
  SharedDtor();
}

void StreamingRecognitionConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete config_;
}

void StreamingRecognitionConfig::ArenaDtor(void* object) {
  StreamingRecognitionConfig* _this = reinterpret_cast< StreamingRecognitionConfig* >(object);
  (void)_this;
}
void StreamingRecognitionConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognitionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognitionConfig::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognitionConfig& StreamingRecognitionConfig::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingRecognitionConfig* StreamingRecognitionConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognitionConfig>(arena);
}

void StreamingRecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  ::memset(&single_utterance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interim_results_) -
      reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  _internal_metadata_.Clear();
}

bool StreamingRecognitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool single_utterance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_utterance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool interim_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interim_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognitionConfig)
  return false;
#undef DO_
}

void StreamingRecognitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->single_utterance(), output);
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->interim_results(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognitionConfig)
}

::google::protobuf::uint8* StreamingRecognitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_, deterministic, target);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->single_utterance(), target);
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->interim_results(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionConfig)
  return target;
}

size_t StreamingRecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    total_size += 1 + 1;
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognitionConfig)
    MergeFrom(*source);
  }
}

void StreamingRecognitionConfig::MergeFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.single_utterance() != 0) {
    set_single_utterance(from.single_utterance());
  }
  if (from.interim_results() != 0) {
    set_interim_results(from.interim_results());
  }
}

void StreamingRecognitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionConfig::CopyFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionConfig::IsInitialized() const {
  return true;
}

void StreamingRecognitionConfig::Swap(StreamingRecognitionConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognitionConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognitionConfig::UnsafeArenaSwap(StreamingRecognitionConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognitionConfig::InternalSwap(StreamingRecognitionConfig* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(single_utterance_, other->single_utterance_);
  swap(interim_results_, other->interim_results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognitionConfig::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingRecognitionConfig

// .google.cloud.speech.v1.RecognitionConfig config = 1;
bool StreamingRecognitionConfig::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void StreamingRecognitionConfig::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::cloud::speech::v1::RecognitionConfig& StreamingRecognitionConfig::config() const {
  const ::google::cloud::speech::v1::RecognitionConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig*>(
      &::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::mutable_config() {
  
  if (config_ == NULL) {
    _slow_mutable_config();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  return config_;
}
::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_config();
  } else {
    ::google::cloud::speech::v1::RecognitionConfig* temp = config_;
    config_ = NULL;
    return temp;
  }
}
 void StreamingRecognitionConfig::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config != NULL) {
    _slow_set_allocated_config(message_arena, &config);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.config)
}

// bool single_utterance = 2;
void StreamingRecognitionConfig::clear_single_utterance() {
  single_utterance_ = false;
}
bool StreamingRecognitionConfig::single_utterance() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.single_utterance)
  return single_utterance_;
}
void StreamingRecognitionConfig::set_single_utterance(bool value) {
  
  single_utterance_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionConfig.single_utterance)
}

// bool interim_results = 3;
void StreamingRecognitionConfig::clear_interim_results() {
  interim_results_ = false;
}
bool StreamingRecognitionConfig::interim_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.interim_results)
  return interim_results_;
}
void StreamingRecognitionConfig::set_interim_results(bool value) {
  
  interim_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionConfig.interim_results)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionConfig::kEncodingFieldNumber;
const int RecognitionConfig::kSampleRateHertzFieldNumber;
const int RecognitionConfig::kLanguageCodeFieldNumber;
const int RecognitionConfig::kMaxAlternativesFieldNumber;
const int RecognitionConfig::kProfanityFilterFieldNumber;
const int RecognitionConfig::kSpeechContextsFieldNumber;
const int RecognitionConfig::kEnableWordTimeOffsetsFieldNumber;
const int RecognitionConfig::kEnableAutomaticPunctuationFieldNumber;
const int RecognitionConfig::kConfigFieldsFieldNumber;
const int RecognitionConfig::kModelFieldNumber;
const int RecognitionConfig::kUseEnhancedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionConfig::RecognitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  speech_contexts_(arena),
  config_fields_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      speech_contexts_(from.speech_contexts_),
      config_fields_(from.config_fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model(),
      GetArenaNoVirtual());
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_enhanced_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionConfig)
}

void RecognitionConfig::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_enhanced_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
  _cached_size_ = 0;
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionConfig)
  SharedDtor();
}

void RecognitionConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  language_code_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  model_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void RecognitionConfig::ArenaDtor(void* object) {
  RecognitionConfig* _this = reinterpret_cast< RecognitionConfig* >(object);
  (void)_this;
}
void RecognitionConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognitionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognitionConfig::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionConfig& RecognitionConfig::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognitionConfig* RecognitionConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognitionConfig>(arena);
}

void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speech_contexts_.Clear();
  config_fields_.Clear();
  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_enhanced_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
  _internal_metadata_.Clear();
}

bool RecognitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognitionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.RecognitionConfig.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_alternatives = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alternatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool profanity_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &profanity_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speech_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_word_time_offsets = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_word_time_offsets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_automatic_punctuation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_automatic_punctuation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.RecognitionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_enhanced = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_enhanced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognitionConfig)
  return false;
#undef DO_
}

void RecognitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate_hertz(), output);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language_code(), output);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_alternatives(), output);
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->profanity_filter(), output);
  }

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->speech_contexts(static_cast<int>(i)), output);
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_word_time_offsets(), output);
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_automatic_punctuation(), output);
  }

  // repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->config_fields(static_cast<int>(i)), output);
  }

  // string model = 13;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->model(), output);
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_enhanced(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognitionConfig)
}

::google::protobuf::uint8* RecognitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate_hertz(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language_code(), target);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_alternatives(), target);
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->profanity_filter(), target);
  }

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->speech_contexts(static_cast<int>(i)), deterministic, target);
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_word_time_offsets(), target);
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_automatic_punctuation(), target);
  }

  // repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->config_fields(static_cast<int>(i)), deterministic, target);
  }

  // string model = 13;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->model(), target);
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_enhanced(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->speech_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speech_contexts(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->config_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_fields(static_cast<int>(i)));
    }
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // string model = 13;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_alternatives());
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    total_size += 1 + 1;
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionConfig)
    MergeFrom(*source);
  }
}

void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speech_contexts_.MergeFrom(from.speech_contexts_);
  config_fields_.MergeFrom(from.config_fields_);
  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (from.model().size() > 0) {
    set_model(from.model());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.max_alternatives() != 0) {
    set_max_alternatives(from.max_alternatives());
  }
  if (from.profanity_filter() != 0) {
    set_profanity_filter(from.profanity_filter());
  }
  if (from.enable_word_time_offsets() != 0) {
    set_enable_word_time_offsets(from.enable_word_time_offsets());
  }
  if (from.enable_automatic_punctuation() != 0) {
    set_enable_automatic_punctuation(from.enable_automatic_punctuation());
  }
  if (from.use_enhanced() != 0) {
    set_use_enhanced(from.use_enhanced());
  }
}

void RecognitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::Swap(RecognitionConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionConfig::UnsafeArenaSwap(RecognitionConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  speech_contexts_.InternalSwap(&other->speech_contexts_);
  config_fields_.InternalSwap(&other->config_fields_);
  language_code_.Swap(&other->language_code_);
  model_.Swap(&other->model_);
  swap(encoding_, other->encoding_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(max_alternatives_, other->max_alternatives_);
  swap(profanity_filter_, other->profanity_filter_);
  swap(enable_word_time_offsets_, other->enable_word_time_offsets_);
  swap(enable_automatic_punctuation_, other->enable_automatic_punctuation_);
  swap(use_enhanced_, other->use_enhanced_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognitionConfig::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognitionConfig

// .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
void RecognitionConfig::clear_encoding() {
  encoding_ = 0;
}
::google::cloud::speech::v1::RecognitionConfig_AudioEncoding RecognitionConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.encoding)
  return static_cast< ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding >(encoding_);
}
void RecognitionConfig::set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.encoding)
}

// int32 sample_rate_hertz = 2;
void RecognitionConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
::google::protobuf::int32 RecognitionConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
void RecognitionConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.sample_rate_hertz)
}

// string language_code = 3;
void RecognitionConfig::clear_language_code() {
  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RecognitionConfig::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.language_code)
  return language_code_.Get();
}
void RecognitionConfig::set_language_code(const ::std::string& value) {
  
  language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.language_code)
}
#if LANG_CXX11
void RecognitionConfig::set_language_code(::std::string&& value) {
  
  language_code_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.RecognitionConfig.language_code)
}
#endif
void RecognitionConfig::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.RecognitionConfig.language_code)
}
void RecognitionConfig::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.RecognitionConfig.language_code)
}
::std::string* RecognitionConfig::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.language_code)
  return language_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecognitionConfig::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.language_code)
  
  return language_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecognitionConfig::unsafe_arena_release_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.RecognitionConfig.language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return language_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RecognitionConfig::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.language_code)
}
void RecognitionConfig::unsafe_arena_set_allocated_language_code(
    ::std::string* language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.language_code)
}

// int32 max_alternatives = 4;
void RecognitionConfig::clear_max_alternatives() {
  max_alternatives_ = 0;
}
::google::protobuf::int32 RecognitionConfig::max_alternatives() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.max_alternatives)
  return max_alternatives_;
}
void RecognitionConfig::set_max_alternatives(::google::protobuf::int32 value) {
  
  max_alternatives_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.max_alternatives)
}

// bool profanity_filter = 5;
void RecognitionConfig::clear_profanity_filter() {
  profanity_filter_ = false;
}
bool RecognitionConfig::profanity_filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.profanity_filter)
  return profanity_filter_;
}
void RecognitionConfig::set_profanity_filter(bool value) {
  
  profanity_filter_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.profanity_filter)
}

// repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
int RecognitionConfig::speech_contexts_size() const {
  return speech_contexts_.size();
}
void RecognitionConfig::clear_speech_contexts() {
  speech_contexts_.Clear();
}
const ::google::cloud::speech::v1::SpeechContext& RecognitionConfig::speech_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return speech_contexts_.Get(index);
}
::google::cloud::speech::v1::SpeechContext* RecognitionConfig::mutable_speech_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return speech_contexts_.Mutable(index);
}
::google::cloud::speech::v1::SpeechContext* RecognitionConfig::add_speech_contexts() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return speech_contexts_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext >*
RecognitionConfig::mutable_speech_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return &speech_contexts_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext >&
RecognitionConfig::speech_contexts() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return speech_contexts_;
}

// bool enable_word_time_offsets = 8;
void RecognitionConfig::clear_enable_word_time_offsets() {
  enable_word_time_offsets_ = false;
}
bool RecognitionConfig::enable_word_time_offsets() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_word_time_offsets)
  return enable_word_time_offsets_;
}
void RecognitionConfig::set_enable_word_time_offsets(bool value) {
  
  enable_word_time_offsets_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_word_time_offsets)
}

// bool enable_automatic_punctuation = 11;
void RecognitionConfig::clear_enable_automatic_punctuation() {
  enable_automatic_punctuation_ = false;
}
bool RecognitionConfig::enable_automatic_punctuation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_automatic_punctuation)
  return enable_automatic_punctuation_;
}
void RecognitionConfig::set_enable_automatic_punctuation(bool value) {
  
  enable_automatic_punctuation_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_automatic_punctuation)
}

// repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
int RecognitionConfig::config_fields_size() const {
  return config_fields_.size();
}
void RecognitionConfig::clear_config_fields() {
  config_fields_.Clear();
}
const ::google::cloud::speech::v1::ConfigField& RecognitionConfig::config_fields(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.config_fields)
  return config_fields_.Get(index);
}
::google::cloud::speech::v1::ConfigField* RecognitionConfig::mutable_config_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.config_fields)
  return config_fields_.Mutable(index);
}
::google::cloud::speech::v1::ConfigField* RecognitionConfig::add_config_fields() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionConfig.config_fields)
  return config_fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::ConfigField >*
RecognitionConfig::mutable_config_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionConfig.config_fields)
  return &config_fields_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::ConfigField >&
RecognitionConfig::config_fields() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionConfig.config_fields)
  return config_fields_;
}

// string model = 13;
void RecognitionConfig::clear_model() {
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RecognitionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.model)
  return model_.Get();
}
void RecognitionConfig::set_model(const ::std::string& value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.model)
}
#if LANG_CXX11
void RecognitionConfig::set_model(::std::string&& value) {
  
  model_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.RecognitionConfig.model)
}
#endif
void RecognitionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.RecognitionConfig.model)
}
void RecognitionConfig::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.RecognitionConfig.model)
}
::std::string* RecognitionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.model)
  return model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecognitionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.model)
  
  return model_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecognitionConfig::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.RecognitionConfig.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RecognitionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.model)
}
void RecognitionConfig::unsafe_arena_set_allocated_model(
    ::std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model != NULL) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.model)
}

// bool use_enhanced = 14;
void RecognitionConfig::clear_use_enhanced() {
  use_enhanced_ = false;
}
bool RecognitionConfig::use_enhanced() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.use_enhanced)
  return use_enhanced_;
}
void RecognitionConfig::set_use_enhanced(bool value) {
  
  use_enhanced_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.use_enhanced)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechContext::kPhrasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechContext::SpeechContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.SpeechContext)
}
SpeechContext::SpeechContext(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  phrases_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechContext)
}
SpeechContext::SpeechContext(const SpeechContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      phrases_(from.phrases_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechContext)
}

void SpeechContext::SharedCtor() {
  _cached_size_ = 0;
}

SpeechContext::~SpeechContext() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechContext)
  SharedDtor();
}

void SpeechContext::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SpeechContext::ArenaDtor(void* object) {
  SpeechContext* _this = reinterpret_cast< SpeechContext* >(object);
  (void)_this;
}
void SpeechContext::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeechContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechContext::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechContext& SpeechContext::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeechContext* SpeechContext::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeechContext>(arena);
}

void SpeechContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrases_.Clear();
  _internal_metadata_.Clear();
}

bool SpeechContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.SpeechContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string phrases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phrases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phrases(this->phrases_size() - 1).data(),
            static_cast<int>(this->phrases(this->phrases_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.SpeechContext.phrases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.SpeechContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.SpeechContext)
  return false;
#undef DO_
}

void SpeechContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechContext.phrases");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phrases(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.SpeechContext)
}

::google::protobuf::uint8* SpeechContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechContext.phrases");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->phrases(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechContext)
  return target;
}

size_t SpeechContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string phrases = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phrases_size());
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phrases(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechContext)
    MergeFrom(*source);
  }
}

void SpeechContext::MergeFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phrases_.MergeFrom(from.phrases_);
}

void SpeechContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechContext::CopyFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechContext::IsInitialized() const {
  return true;
}

void SpeechContext::Swap(SpeechContext* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechContext* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechContext::UnsafeArenaSwap(SpeechContext* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechContext::InternalSwap(SpeechContext* other) {
  using std::swap;
  phrases_.InternalSwap(&other->phrases_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechContext::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeechContext

// repeated string phrases = 1;
int SpeechContext::phrases_size() const {
  return phrases_.size();
}
void SpeechContext::clear_phrases() {
  phrases_.Clear();
}
const ::std::string& SpeechContext::phrases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechContext.phrases)
  return phrases_.Get(index);
}
::std::string* SpeechContext::mutable_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechContext.phrases)
  return phrases_.Mutable(index);
}
void SpeechContext::set_phrases(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechContext.phrases)
  phrases_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SpeechContext::set_phrases(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechContext.phrases)
  phrases_.Mutable(index)->assign(std::move(value));
}
#endif
void SpeechContext::set_phrases(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phrases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.SpeechContext.phrases)
}
void SpeechContext::set_phrases(int index, const char* value, size_t size) {
  phrases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.SpeechContext.phrases)
}
::std::string* SpeechContext::add_phrases() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.speech.v1.SpeechContext.phrases)
  return phrases_.Add();
}
void SpeechContext::add_phrases(const ::std::string& value) {
  phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechContext.phrases)
}
#if LANG_CXX11
void SpeechContext::add_phrases(::std::string&& value) {
  phrases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechContext.phrases)
}
#endif
void SpeechContext::add_phrases(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.speech.v1.SpeechContext.phrases)
}
void SpeechContext::add_phrases(const char* value, size_t size) {
  phrases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.speech.v1.SpeechContext.phrases)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpeechContext::phrases() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechContext.phrases)
  return phrases_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SpeechContext::mutable_phrases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechContext.phrases)
  return &phrases_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigField::kKeyFieldNumber;
const int ConfigField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigField::ConfigField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.ConfigField)
}
ConfigField::ConfigField(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.ConfigField)
}
ConfigField::ConfigField(const ConfigField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key(),
      GetArenaNoVirtual());
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.ConfigField)
}

void ConfigField::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfigField::~ConfigField() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.ConfigField)
  SharedDtor();
}

void ConfigField::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ConfigField::ArenaDtor(void* object) {
  ConfigField* _this = reinterpret_cast< ConfigField* >(object);
  (void)_this;
}
void ConfigField::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigField::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigField& ConfigField::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigField* ConfigField::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConfigField>(arena);
}

void ConfigField::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.ConfigField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ConfigField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.ConfigField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.ConfigField.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.ConfigField.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.ConfigField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.ConfigField)
  return false;
#undef DO_
}

void ConfigField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.ConfigField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.ConfigField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.ConfigField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.ConfigField)
}

::google::protobuf::uint8* ConfigField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.ConfigField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.ConfigField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.ConfigField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.ConfigField)
  return target;
}

size_t ConfigField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.ConfigField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.ConfigField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.ConfigField)
    MergeFrom(*source);
  }
}

void ConfigField::MergeFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    set_key(from.key());
  }
  if (from.value().size() > 0) {
    set_value(from.value());
  }
}

void ConfigField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigField::CopyFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigField::IsInitialized() const {
  return true;
}

void ConfigField::Swap(ConfigField* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigField* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigField::UnsafeArenaSwap(ConfigField* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigField::InternalSwap(ConfigField* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigField::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigField

// string key = 1;
void ConfigField::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ConfigField::key() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ConfigField.key)
  return key_.Get();
}
void ConfigField::set_key(const ::std::string& value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ConfigField.key)
}
#if LANG_CXX11
void ConfigField::set_key(::std::string&& value) {
  
  key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.ConfigField.key)
}
#endif
void ConfigField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.ConfigField.key)
}
void ConfigField::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.ConfigField.key)
}
::std::string* ConfigField::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ConfigField.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ConfigField::release_key() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ConfigField.key)
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ConfigField::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.ConfigField.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ConfigField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ConfigField.key)
}
void ConfigField::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.ConfigField.key)
}

// string value = 2;
void ConfigField::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ConfigField::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.ConfigField.value)
  return value_.Get();
}
void ConfigField::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.ConfigField.value)
}
#if LANG_CXX11
void ConfigField::set_value(::std::string&& value) {
  
  value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.ConfigField.value)
}
#endif
void ConfigField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.ConfigField.value)
}
void ConfigField::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.ConfigField.value)
}
::std::string* ConfigField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.ConfigField.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ConfigField::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.ConfigField.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ConfigField::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.ConfigField.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ConfigField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.ConfigField.value)
}
void ConfigField::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.ConfigField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionAudio::kContentFieldNumber;
const int RecognitionAudio::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionAudio::RecognitionAudio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(const RecognitionAudio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_audio_source();
  switch (from.audio_source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionAudio)
}

void RecognitionAudio::SharedCtor() {
  clear_has_audio_source();
  _cached_size_ = 0;
}

RecognitionAudio::~RecognitionAudio() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionAudio)
  SharedDtor();
}

void RecognitionAudio::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (has_audio_source()) {
    clear_audio_source();
  }
}

void RecognitionAudio::ArenaDtor(void* object) {
  RecognitionAudio* _this = reinterpret_cast< RecognitionAudio* >(object);
  (void)_this;
}
void RecognitionAudio::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognitionAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognitionAudio::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionAudio& RecognitionAudio::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognitionAudio* RecognitionAudio::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognitionAudio>(arena);
}

void RecognitionAudio::clear_audio_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.RecognitionAudio)
  switch (audio_source_case()) {
    case kContent: {
      audio_source_.content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kUri: {
      audio_source_.uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}


void RecognitionAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_audio_source();
  _internal_metadata_.Clear();
}

bool RecognitionAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognitionAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.RecognitionAudio.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognitionAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognitionAudio)
  return false;
#undef DO_
}

void RecognitionAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionAudio.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognitionAudio)
}

::google::protobuf::uint8* RecognitionAudio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionAudio.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionAudio)
  return target;
}

size_t RecognitionAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionAudio)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (audio_source_case()) {
    // bytes content = 1;
    case kContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
      break;
    }
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognitionAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionAudio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionAudio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionAudio)
    MergeFrom(*source);
  }
}

void RecognitionAudio::MergeFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.audio_source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
}

void RecognitionAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionAudio::CopyFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionAudio::IsInitialized() const {
  return true;
}

void RecognitionAudio::Swap(RecognitionAudio* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionAudio* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionAudio::UnsafeArenaSwap(RecognitionAudio* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionAudio::InternalSwap(RecognitionAudio* other) {
  using std::swap;
  swap(audio_source_, other->audio_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognitionAudio::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognitionAudio

// bytes content = 1;
bool RecognitionAudio::has_content() const {
  return audio_source_case() == kContent;
}
void RecognitionAudio::set_has_content() {
  _oneof_case_[0] = kContent;
}
void RecognitionAudio::clear_content() {
  if (has_content()) {
    audio_source_.content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_audio_source();
  }
}
const ::std::string& RecognitionAudio::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionAudio.content)
  if (has_content()) {
    return audio_source_.content_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RecognitionAudio::set_content(const ::std::string& value) {
  if (!has_content()) {
    clear_audio_source();
    set_has_content();
    audio_source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.content)
}
#if LANG_CXX11
void RecognitionAudio::set_content(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.content)
  if (!has_content()) {
    clear_audio_source();
    set_has_content();
    audio_source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.RecognitionAudio.content)
}
#endif
void RecognitionAudio::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_content()) {
    clear_audio_source();
    set_has_content();
    audio_source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.RecognitionAudio.content)
}
void RecognitionAudio::set_content(const void* value,
                             size_t size) {
  if (!has_content()) {
    clear_audio_source();
    set_has_content();
    audio_source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.RecognitionAudio.content)
}
::std::string* RecognitionAudio::mutable_content() {
  if (!has_content()) {
    clear_audio_source();
    set_has_content();
    audio_source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return audio_source_.content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionAudio.content)
}
::std::string* RecognitionAudio::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionAudio.content)
  if (has_content()) {
    clear_has_audio_source();
    return audio_source_.content_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* RecognitionAudio::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.RecognitionAudio.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_content()) {
    clear_has_audio_source();
    return audio_source_.content_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void RecognitionAudio::set_allocated_content(::std::string* content) {
  if (!has_content()) {
    audio_source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_audio_source();
  if (content != NULL) {
    set_has_content();
    audio_source_.content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionAudio.content)
}
void RecognitionAudio::unsafe_arena_set_allocated_content(::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_content()) {
    audio_source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_audio_source();
  if (content) {
    set_has_content();
    audio_source_.content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionAudio.content)
}

// string uri = 2;
bool RecognitionAudio::has_uri() const {
  return audio_source_case() == kUri;
}
void RecognitionAudio::set_has_uri() {
  _oneof_case_[0] = kUri;
}
void RecognitionAudio::clear_uri() {
  if (has_uri()) {
    audio_source_.uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_audio_source();
  }
}
const ::std::string& RecognitionAudio::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionAudio.uri)
  if (has_uri()) {
    return audio_source_.uri_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RecognitionAudio::set_uri(const ::std::string& value) {
  if (!has_uri()) {
    clear_audio_source();
    set_has_uri();
    audio_source_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.uri)
}
#if LANG_CXX11
void RecognitionAudio::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.uri)
  if (!has_uri()) {
    clear_audio_source();
    set_has_uri();
    audio_source_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.uri_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.RecognitionAudio.uri)
}
#endif
void RecognitionAudio::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_uri()) {
    clear_audio_source();
    set_has_uri();
    audio_source_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.RecognitionAudio.uri)
}
void RecognitionAudio::set_uri(const char* value,
                             size_t size) {
  if (!has_uri()) {
    clear_audio_source();
    set_has_uri();
    audio_source_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  audio_source_.uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.RecognitionAudio.uri)
}
::std::string* RecognitionAudio::mutable_uri() {
  if (!has_uri()) {
    clear_audio_source();
    set_has_uri();
    audio_source_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return audio_source_.uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionAudio.uri)
}
::std::string* RecognitionAudio::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionAudio.uri)
  if (has_uri()) {
    clear_has_audio_source();
    return audio_source_.uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* RecognitionAudio::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.RecognitionAudio.uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_uri()) {
    clear_has_audio_source();
    return audio_source_.uri_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void RecognitionAudio::set_allocated_uri(::std::string* uri) {
  if (!has_uri()) {
    audio_source_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_audio_source();
  if (uri != NULL) {
    set_has_uri();
    audio_source_.uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionAudio.uri)
}
void RecognitionAudio::unsafe_arena_set_allocated_uri(::std::string* uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_uri()) {
    audio_source_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_audio_source();
  if (uri) {
    set_has_uri();
    audio_source_.uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionAudio.uri)
}

bool RecognitionAudio::has_audio_source() const {
  return audio_source_case() != AUDIO_SOURCE_NOT_SET;
}
void RecognitionAudio::clear_has_audio_source() {
  _oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}
RecognitionAudio::AudioSourceCase RecognitionAudio::audio_source_case() const {
  return RecognitionAudio::AudioSourceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResponse::RecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
  _cached_size_ = 0;
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeResponse)
  SharedDtor();
}

void RecognizeResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void RecognizeResponse::ArenaDtor(void* object) {
  RecognizeResponse* _this = reinterpret_cast< RecognizeResponse* >(object);
  (void)_this;
}
void RecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeResponse::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeResponse& RecognizeResponse::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognizeResponse* RecognizeResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognizeResponse>(arena);
}

void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool RecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognizeResponse)
  return false;
#undef DO_
}

void RecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognizeResponse)
}

::google::protobuf::uint8* RecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeResponse)
  return target;
}

size_t RecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognizeResponse)
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void RecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {
  return true;
}

void RecognizeResponse::Swap(RecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognizeResponse::UnsafeArenaSwap(RecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeResponse::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeResponse

// repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
int RecognizeResponse::results_size() const {
  return results_.size();
}
void RecognizeResponse::clear_results() {
  results_.Clear();
}
const ::google::cloud::speech::v1::SpeechRecognitionResult& RecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeResponse.results)
  return results_.Get(index);
}
::google::cloud::speech::v1::SpeechRecognitionResult* RecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeResponse.results)
  return results_.Mutable(index);
}
::google::cloud::speech::v1::SpeechRecognitionResult* RecognizeResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognizeResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >*
RecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognizeResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult >&
RecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognizeResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamingRecognizeResponse::_slow_mutable_error() {
  error_ = ::google::protobuf::Arena::Create< ::google::rpc::Status >(
      GetArenaNoVirtual());
}
::google::rpc::Status* StreamingRecognizeResponse::_slow_release_error() {
  if (error_ == NULL) {
    return NULL;
  } else {
    ::google::rpc::Status* temp = new ::google::rpc::Status(*error_);
    error_ = NULL;
    return temp;
  }
}
::google::rpc::Status* StreamingRecognizeResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = NULL;
  return temp;
}
void StreamingRecognizeResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == NULL) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.error)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognizeResponse::kErrorFieldNumber;
const int StreamingRecognizeResponse::kResultsFieldNumber;
const int StreamingRecognizeResponse::kSpeechEventTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognizeResponse::StreamingRecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(const StreamingRecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = NULL;
  }
  speech_event_type_ = from.speech_event_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}

void StreamingRecognizeResponse::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_event_type_) -
      reinterpret_cast<char*>(&error_)) + sizeof(speech_event_type_));
  _cached_size_ = 0;
}

StreamingRecognizeResponse::~StreamingRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeResponse)
  SharedDtor();
}

void StreamingRecognizeResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete error_;
}

void StreamingRecognizeResponse::ArenaDtor(void* object) {
  StreamingRecognizeResponse* _this = reinterpret_cast< StreamingRecognizeResponse* >(object);
  (void)_this;
}
void StreamingRecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognizeResponse::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognizeResponse& StreamingRecognizeResponse::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingRecognizeResponse* StreamingRecognizeResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognizeResponse>(arena);
}

void StreamingRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  speech_event_type_ = 0;
  _internal_metadata_.Clear();
}

bool StreamingRecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speech_event_type(static_cast< ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognizeResponse)
  return false;
#undef DO_
}

void StreamingRecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->speech_event_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognizeResponse)
}

::google::protobuf::uint8* StreamingRecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->speech_event_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeResponse)
  return target;
}

size_t StreamingRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->speech_event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognizeResponse)
    MergeFrom(*source);
  }
}

void StreamingRecognizeResponse::MergeFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
  if (from.speech_event_type() != 0) {
    set_speech_event_type(from.speech_event_type());
  }
}

void StreamingRecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeResponse::CopyFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeResponse::IsInitialized() const {
  return true;
}

void StreamingRecognizeResponse::Swap(StreamingRecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognizeResponse::UnsafeArenaSwap(StreamingRecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognizeResponse::InternalSwap(StreamingRecognizeResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(error_, other->error_);
  swap(speech_event_type_, other->speech_event_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognizeResponse::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingRecognizeResponse

// .google.rpc.Status error = 1;
bool StreamingRecognizeResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void StreamingRecognizeResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::google::rpc::Status& StreamingRecognizeResponse::error() const {
  const ::google::rpc::Status* p = error_;
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
::google::rpc::Status* StreamingRecognizeResponse::mutable_error() {
  
  if (error_ == NULL) {
    _slow_mutable_error();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  return error_;
}
::google::rpc::Status* StreamingRecognizeResponse::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_error();
  } else {
    ::google::rpc::Status* temp = error_;
    error_ = NULL;
    return temp;
  }
}
 void StreamingRecognizeResponse::set_allocated_error(::google::rpc::Status* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(error);
    }
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.error)
}

// repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
int StreamingRecognizeResponse::results_size() const {
  return results_.size();
}
void StreamingRecognizeResponse::clear_results() {
  results_.Clear();
}
const ::google::cloud::speech::v1::StreamingRecognitionResult& StreamingRecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return results_.Get(index);
}
::google::cloud::speech::v1::StreamingRecognitionResult* StreamingRecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return results_.Mutable(index);
}
::google::cloud::speech::v1::StreamingRecognitionResult* StreamingRecognizeResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult >*
StreamingRecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult >&
StreamingRecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return results_;
}

// .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
void StreamingRecognizeResponse::clear_speech_event_type() {
  speech_event_type_ = 0;
}
::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::speech_event_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_type)
  return static_cast< ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType >(speech_event_type_);
}
void StreamingRecognizeResponse::set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value) {
  
  speech_event_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognitionResult::kAlternativesFieldNumber;
const int StreamingRecognitionResult::kIsFinalFieldNumber;
const int StreamingRecognitionResult::kStabilityFieldNumber;
const int StreamingRecognitionResult::kResultFinalizationCauseFieldNumber;
const int StreamingRecognitionResult::kLatticeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognitionResult::StreamingRecognitionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alternatives_(arena),
  lattice_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(const StreamingRecognitionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_),
      lattice_(from.lattice_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_finalization_cause_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(result_finalization_cause_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}

void StreamingRecognitionResult::SharedCtor() {
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_finalization_cause_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(result_finalization_cause_));
  _cached_size_ = 0;
}

StreamingRecognitionResult::~StreamingRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionResult)
  SharedDtor();
}

void StreamingRecognitionResult::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void StreamingRecognitionResult::ArenaDtor(void* object) {
  StreamingRecognitionResult* _this = reinterpret_cast< StreamingRecognitionResult* >(object);
  (void)_this;
}
void StreamingRecognitionResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognitionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognitionResult::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognitionResult& StreamingRecognitionResult::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamingRecognitionResult* StreamingRecognitionResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognitionResult>(arena);
}

void StreamingRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  lattice_.Clear();
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_finalization_cause_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(result_finalization_cause_));
  _internal_metadata_.Clear();
}

bool StreamingRecognitionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognitionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float stability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_finalization_cause(static_cast< ::google::cloud::speech::v1::StreamingRecognitionResult_ResultFinalizationCause >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lattice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognitionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognitionResult)
  return false;
#undef DO_
}

void StreamingRecognitionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alternatives(static_cast<int>(i)), output);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_final(), output);
  }

  // float stability = 3;
  if (this->stability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stability(), output);
  }

  // .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
  if (this->result_finalization_cause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result_finalization_cause(), output);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lattice_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lattice(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognitionResult)
}

::google::protobuf::uint8* StreamingRecognitionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_final(), target);
  }

  // float stability = 3;
  if (this->stability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stability(), target);
  }

  // .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
  if (this->result_finalization_cause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result_finalization_cause(), target);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lattice_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->lattice(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionResult)
  return target;
}

size_t StreamingRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alternatives(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->lattice_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lattice(static_cast<int>(i)));
    }
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // float stability = 3;
  if (this->stability() != 0) {
    total_size += 1 + 4;
  }

  // .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
  if (this->result_finalization_cause() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_finalization_cause());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognitionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognitionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognitionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognitionResult)
    MergeFrom(*source);
  }
}

void StreamingRecognitionResult::MergeFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  lattice_.MergeFrom(from.lattice_);
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
  if (from.stability() != 0) {
    set_stability(from.stability());
  }
  if (from.result_finalization_cause() != 0) {
    set_result_finalization_cause(from.result_finalization_cause());
  }
}

void StreamingRecognitionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionResult::CopyFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionResult::IsInitialized() const {
  return true;
}

void StreamingRecognitionResult::Swap(StreamingRecognitionResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognitionResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognitionResult::UnsafeArenaSwap(StreamingRecognitionResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognitionResult::InternalSwap(StreamingRecognitionResult* other) {
  using std::swap;
  alternatives_.InternalSwap(&other->alternatives_);
  lattice_.InternalSwap(&other->lattice_);
  swap(is_final_, other->is_final_);
  swap(stability_, other->stability_);
  swap(result_finalization_cause_, other->result_finalization_cause_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognitionResult::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingRecognitionResult

// repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
int StreamingRecognitionResult::alternatives_size() const {
  return alternatives_.size();
}
void StreamingRecognitionResult::clear_alternatives() {
  alternatives_.Clear();
}
const ::google::cloud::speech::v1::SpeechRecognitionAlternative& StreamingRecognitionResult::alternatives(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return alternatives_.Get(index);
}
::google::cloud::speech::v1::SpeechRecognitionAlternative* StreamingRecognitionResult::mutable_alternatives(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return alternatives_.Mutable(index);
}
::google::cloud::speech::v1::SpeechRecognitionAlternative* StreamingRecognitionResult::add_alternatives() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return alternatives_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >*
StreamingRecognitionResult::mutable_alternatives() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return &alternatives_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >&
StreamingRecognitionResult::alternatives() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return alternatives_;
}

// bool is_final = 2;
void StreamingRecognitionResult::clear_is_final() {
  is_final_ = false;
}
bool StreamingRecognitionResult::is_final() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.is_final)
  return is_final_;
}
void StreamingRecognitionResult::set_is_final(bool value) {
  
  is_final_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.is_final)
}

// float stability = 3;
void StreamingRecognitionResult::clear_stability() {
  stability_ = 0;
}
float StreamingRecognitionResult::stability() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.stability)
  return stability_;
}
void StreamingRecognitionResult::set_stability(float value) {
  
  stability_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.stability)
}

// .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
void StreamingRecognitionResult::clear_result_finalization_cause() {
  result_finalization_cause_ = 0;
}
::google::cloud::speech::v1::StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::result_finalization_cause() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.result_finalization_cause)
  return static_cast< ::google::cloud::speech::v1::StreamingRecognitionResult_ResultFinalizationCause >(result_finalization_cause_);
}
void StreamingRecognitionResult::set_result_finalization_cause(::google::cloud::speech::v1::StreamingRecognitionResult_ResultFinalizationCause value) {
  
  result_finalization_cause_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.result_finalization_cause)
}

// repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
int StreamingRecognitionResult::lattice_size() const {
  return lattice_.size();
}
void StreamingRecognitionResult::clear_lattice() {
  lattice_.Clear();
}
const ::google::cloud::speech::v1::RecognitionLattice& StreamingRecognitionResult::lattice(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.lattice)
  return lattice_.Get(index);
}
::google::cloud::speech::v1::RecognitionLattice* StreamingRecognitionResult::mutable_lattice(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.lattice)
  return lattice_.Mutable(index);
}
::google::cloud::speech::v1::RecognitionLattice* StreamingRecognitionResult::add_lattice() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.StreamingRecognitionResult.lattice)
  return lattice_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::RecognitionLattice >*
StreamingRecognitionResult::mutable_lattice() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.StreamingRecognitionResult.lattice)
  return &lattice_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::RecognitionLattice >&
StreamingRecognitionResult::lattice() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.StreamingRecognitionResult.lattice)
  return lattice_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionResult::kAlternativesFieldNumber;
const int SpeechRecognitionResult::kLatticeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionResult::SpeechRecognitionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alternatives_(arena),
  lattice_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(const SpeechRecognitionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_),
      lattice_(from.lattice_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}

void SpeechRecognitionResult::SharedCtor() {
  _cached_size_ = 0;
}

SpeechRecognitionResult::~SpeechRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionResult)
  SharedDtor();
}

void SpeechRecognitionResult::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SpeechRecognitionResult::ArenaDtor(void* object) {
  SpeechRecognitionResult* _this = reinterpret_cast< SpeechRecognitionResult* >(object);
  (void)_this;
}
void SpeechRecognitionResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeechRecognitionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechRecognitionResult::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionResult& SpeechRecognitionResult::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeechRecognitionResult* SpeechRecognitionResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeechRecognitionResult>(arena);
}

void SpeechRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  lattice_.Clear();
  _internal_metadata_.Clear();
}

bool SpeechRecognitionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.SpeechRecognitionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lattice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.SpeechRecognitionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.SpeechRecognitionResult)
  return false;
#undef DO_
}

void SpeechRecognitionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alternatives(static_cast<int>(i)), output);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lattice_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lattice(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.SpeechRecognitionResult)
}

::google::protobuf::uint8* SpeechRecognitionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lattice_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->lattice(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionResult)
  return target;
}

size_t SpeechRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alternatives(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->lattice_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lattice(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechRecognitionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechRecognitionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechRecognitionResult)
    MergeFrom(*source);
  }
}

void SpeechRecognitionResult::MergeFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  lattice_.MergeFrom(from.lattice_);
}

void SpeechRecognitionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionResult::CopyFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionResult::IsInitialized() const {
  return true;
}

void SpeechRecognitionResult::Swap(SpeechRecognitionResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechRecognitionResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechRecognitionResult::UnsafeArenaSwap(SpeechRecognitionResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechRecognitionResult::InternalSwap(SpeechRecognitionResult* other) {
  using std::swap;
  alternatives_.InternalSwap(&other->alternatives_);
  lattice_.InternalSwap(&other->lattice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechRecognitionResult::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeechRecognitionResult

// repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
int SpeechRecognitionResult::alternatives_size() const {
  return alternatives_.size();
}
void SpeechRecognitionResult::clear_alternatives() {
  alternatives_.Clear();
}
const ::google::cloud::speech::v1::SpeechRecognitionAlternative& SpeechRecognitionResult::alternatives(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return alternatives_.Get(index);
}
::google::cloud::speech::v1::SpeechRecognitionAlternative* SpeechRecognitionResult::mutable_alternatives(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return alternatives_.Mutable(index);
}
::google::cloud::speech::v1::SpeechRecognitionAlternative* SpeechRecognitionResult::add_alternatives() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return alternatives_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >*
SpeechRecognitionResult::mutable_alternatives() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return &alternatives_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative >&
SpeechRecognitionResult::alternatives() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return alternatives_;
}

// repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
int SpeechRecognitionResult::lattice_size() const {
  return lattice_.size();
}
void SpeechRecognitionResult::clear_lattice() {
  lattice_.Clear();
}
const ::google::cloud::speech::v1::RecognitionLattice& SpeechRecognitionResult::lattice(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.lattice)
  return lattice_.Get(index);
}
::google::cloud::speech::v1::RecognitionLattice* SpeechRecognitionResult::mutable_lattice(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.lattice)
  return lattice_.Mutable(index);
}
::google::cloud::speech::v1::RecognitionLattice* SpeechRecognitionResult::add_lattice() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechRecognitionResult.lattice)
  return lattice_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::RecognitionLattice >*
SpeechRecognitionResult::mutable_lattice() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechRecognitionResult.lattice)
  return &lattice_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::RecognitionLattice >&
SpeechRecognitionResult::lattice() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechRecognitionResult.lattice)
  return lattice_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionAlternative::kTranscriptFieldNumber;
const int SpeechRecognitionAlternative::kConfidenceFieldNumber;
const int SpeechRecognitionAlternative::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionAlternative::SpeechRecognitionAlternative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  words_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      words_(from.words_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript(),
      GetArenaNoVirtual());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}

void SpeechRecognitionAlternative::SharedCtor() {
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  _cached_size_ = 0;
}

SpeechRecognitionAlternative::~SpeechRecognitionAlternative() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
  SharedDtor();
}

void SpeechRecognitionAlternative::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  transcript_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SpeechRecognitionAlternative::ArenaDtor(void* object) {
  SpeechRecognitionAlternative* _this = reinterpret_cast< SpeechRecognitionAlternative* >(object);
  (void)_this;
}
void SpeechRecognitionAlternative::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeechRecognitionAlternative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechRecognitionAlternative::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionAlternative& SpeechRecognitionAlternative::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeechRecognitionAlternative* SpeechRecognitionAlternative::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeechRecognitionAlternative>(arena);
}

void SpeechRecognitionAlternative::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  transcript_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool SpeechRecognitionAlternative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.WordInfo words = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return false;
#undef DO_
}

void SpeechRecognitionAlternative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->words(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.SpeechRecognitionAlternative)
}

::google::protobuf::uint8* SpeechRecognitionAlternative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->words(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return target;
}

size_t SpeechRecognitionAlternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->words(static_cast<int>(i)));
    }
  }

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechRecognitionAlternative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionAlternative* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionAlternative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechRecognitionAlternative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechRecognitionAlternative)
    MergeFrom(*source);
  }
}

void SpeechRecognitionAlternative::MergeFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.transcript().size() > 0) {
    set_transcript(from.transcript());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void SpeechRecognitionAlternative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionAlternative::CopyFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionAlternative::IsInitialized() const {
  return true;
}

void SpeechRecognitionAlternative::Swap(SpeechRecognitionAlternative* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechRecognitionAlternative* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechRecognitionAlternative::UnsafeArenaSwap(SpeechRecognitionAlternative* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechRecognitionAlternative::InternalSwap(SpeechRecognitionAlternative* other) {
  using std::swap;
  words_.InternalSwap(&other->words_);
  transcript_.Swap(&other->transcript_);
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechRecognitionAlternative::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeechRecognitionAlternative

// string transcript = 1;
void SpeechRecognitionAlternative::clear_transcript() {
  transcript_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpeechRecognitionAlternative::transcript() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return transcript_.Get();
}
void SpeechRecognitionAlternative::set_transcript(const ::std::string& value) {
  
  transcript_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}
#if LANG_CXX11
void SpeechRecognitionAlternative::set_transcript(::std::string&& value) {
  
  transcript_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}
#endif
void SpeechRecognitionAlternative::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transcript_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}
void SpeechRecognitionAlternative::set_transcript(const char* value,
    size_t size) {
  
  transcript_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}
::std::string* SpeechRecognitionAlternative::mutable_transcript() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return transcript_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpeechRecognitionAlternative::release_transcript() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  
  return transcript_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpeechRecognitionAlternative::unsafe_arena_release_transcript() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return transcript_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpeechRecognitionAlternative::set_allocated_transcript(::std::string* transcript) {
  if (transcript != NULL) {
    
  } else {
    
  }
  transcript_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}
void SpeechRecognitionAlternative::unsafe_arena_set_allocated_transcript(
    ::std::string* transcript) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (transcript != NULL) {
    
  } else {
    
  }
  transcript_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      transcript, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}

// float confidence = 2;
void SpeechRecognitionAlternative::clear_confidence() {
  confidence_ = 0;
}
float SpeechRecognitionAlternative::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.confidence)
  return confidence_;
}
void SpeechRecognitionAlternative::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionAlternative.confidence)
}

// repeated .google.cloud.speech.v1.WordInfo words = 3;
int SpeechRecognitionAlternative::words_size() const {
  return words_.size();
}
void SpeechRecognitionAlternative::clear_words() {
  words_.Clear();
}
const ::google::cloud::speech::v1::WordInfo& SpeechRecognitionAlternative::words(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return words_.Get(index);
}
::google::cloud::speech::v1::WordInfo* SpeechRecognitionAlternative::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return words_.Mutable(index);
}
::google::cloud::speech::v1::WordInfo* SpeechRecognitionAlternative::add_words() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return words_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo >*
SpeechRecognitionAlternative::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return &words_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo >&
SpeechRecognitionAlternative::words() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return words_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void WordInfo::_slow_mutable_start_time() {
  start_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
      GetArenaNoVirtual());
}
::google::protobuf::Duration* WordInfo::_slow_release_start_time() {
  if (start_time_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Duration* temp = new ::google::protobuf::Duration(*start_time_);
    start_time_ = NULL;
    return temp;
  }
}
::google::protobuf::Duration* WordInfo::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.WordInfo.start_time)
  
  ::google::protobuf::Duration* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void WordInfo::_slow_set_allocated_start_time(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Duration** start_time) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*start_time) == NULL) {
      message_arena->Own(*start_time);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*start_time)) {
      ::google::protobuf::Duration* new_start_time = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
            message_arena);
      new_start_time->CopyFrom(**start_time);
      *start_time = new_start_time;
    }
}
void WordInfo::unsafe_arena_set_allocated_start_time(
    ::google::protobuf::Duration* start_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete start_time_;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.start_time)
}
void WordInfo::_slow_mutable_end_time() {
  end_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
      GetArenaNoVirtual());
}
::google::protobuf::Duration* WordInfo::_slow_release_end_time() {
  if (end_time_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Duration* temp = new ::google::protobuf::Duration(*end_time_);
    end_time_ = NULL;
    return temp;
  }
}
::google::protobuf::Duration* WordInfo::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.WordInfo.end_time)
  
  ::google::protobuf::Duration* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
void WordInfo::_slow_set_allocated_end_time(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Duration** end_time) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*end_time) == NULL) {
      message_arena->Own(*end_time);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*end_time)) {
      ::google::protobuf::Duration* new_end_time = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
            message_arena);
      new_end_time->CopyFrom(**end_time);
      *end_time = new_end_time;
    }
}
void WordInfo::unsafe_arena_set_allocated_end_time(
    ::google::protobuf::Duration* end_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete end_time_;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.end_time)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WordInfo::kStartTimeFieldNumber;
const int WordInfo::kEndTimeFieldNumber;
const int WordInfo::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WordInfo::WordInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.WordInfo)
}
WordInfo::WordInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.WordInfo)
}
WordInfo::WordInfo(const WordInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.word().size() > 0) {
    word_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word(),
      GetArenaNoVirtual());
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Duration(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Duration(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.WordInfo)
}

void WordInfo::SharedCtor() {
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

WordInfo::~WordInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.WordInfo)
  SharedDtor();
}

void WordInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  word_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void WordInfo::ArenaDtor(void* object) {
  WordInfo* _this = reinterpret_cast< WordInfo* >(object);
  (void)_this;
}
void WordInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WordInfo::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WordInfo& WordInfo::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

WordInfo* WordInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<WordInfo>(arena);
}

void WordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  _internal_metadata_.Clear();
}

bool WordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.WordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string word = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->word().data(), static_cast<int>(this->word().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.WordInfo.word"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.WordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.WordInfo)
  return false;
#undef DO_
}

void WordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_time_, output);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_time_, output);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.WordInfo.word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->word(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.WordInfo)
}

::google::protobuf::uint8* WordInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_time_, deterministic, target);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.WordInfo.word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->word(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.WordInfo)
  return target;
}

size_t WordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.WordInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string word = 3;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WordInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WordInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WordInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.WordInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.WordInfo)
    MergeFrom(*source);
  }
}

void WordInfo::MergeFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {
    set_word(from.word());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Duration::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Duration::MergeFrom(from.end_time());
  }
}

void WordInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordInfo::CopyFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordInfo::IsInitialized() const {
  return true;
}

void WordInfo::Swap(WordInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WordInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WordInfo::UnsafeArenaSwap(WordInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WordInfo::InternalSwap(WordInfo* other) {
  using std::swap;
  word_.Swap(&other->word_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WordInfo::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WordInfo

// .google.protobuf.Duration start_time = 1;
bool WordInfo::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void WordInfo::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Duration& WordInfo::start_time() const {
  const ::google::protobuf::Duration* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* WordInfo::mutable_start_time() {
  
  if (start_time_ == NULL) {
    _slow_mutable_start_time();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.start_time)
  return start_time_;
}
::google::protobuf::Duration* WordInfo::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.start_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_start_time();
  } else {
    ::google::protobuf::Duration* temp = start_time_;
    start_time_ = NULL;
    return temp;
  }
}
 void WordInfo::set_allocated_start_time(::google::protobuf::Duration* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_time_;
  }
  if (start_time != NULL) {
    _slow_set_allocated_start_time(message_arena, &start_time);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.start_time)
}

// .google.protobuf.Duration end_time = 2;
bool WordInfo::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
void WordInfo::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
const ::google::protobuf::Duration& WordInfo::end_time() const {
  const ::google::protobuf::Duration* p = end_time_;
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* WordInfo::mutable_end_time() {
  
  if (end_time_ == NULL) {
    _slow_mutable_end_time();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.end_time)
  return end_time_;
}
::google::protobuf::Duration* WordInfo::release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.end_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_end_time();
  } else {
    ::google::protobuf::Duration* temp = end_time_;
    end_time_ = NULL;
    return temp;
  }
}
 void WordInfo::set_allocated_end_time(::google::protobuf::Duration* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_time_;
  }
  if (end_time != NULL) {
    _slow_set_allocated_end_time(message_arena, &end_time);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.end_time)
}

// string word = 3;
void WordInfo::clear_word() {
  word_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& WordInfo::word() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.word)
  return word_.Get();
}
void WordInfo::set_word(const ::std::string& value) {
  
  word_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.word)
}
#if LANG_CXX11
void WordInfo::set_word(::std::string&& value) {
  
  word_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.WordInfo.word)
}
#endif
void WordInfo::set_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  word_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.WordInfo.word)
}
void WordInfo::set_word(const char* value,
    size_t size) {
  
  word_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.WordInfo.word)
}
::std::string* WordInfo::mutable_word() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.word)
  return word_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* WordInfo::release_word() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.word)
  
  return word_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* WordInfo::unsafe_arena_release_word() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.WordInfo.word)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return word_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void WordInfo::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    
  } else {
    
  }
  word_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.word)
}
void WordInfo::unsafe_arena_set_allocated_word(
    ::std::string* word) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (word != NULL) {
    
  } else {
    
  }
  word_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      word, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.word)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionLattice::kFinalNodesFieldNumber;
const int RecognitionLattice::kEdgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionLattice::RecognitionLattice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognitionLattice)
}
RecognitionLattice::RecognitionLattice(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  final_nodes_(arena),
  edges_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionLattice)
}
RecognitionLattice::RecognitionLattice(const RecognitionLattice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      final_nodes_(from.final_nodes_),
      edges_(from.edges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionLattice)
}

void RecognitionLattice::SharedCtor() {
  _cached_size_ = 0;
}

RecognitionLattice::~RecognitionLattice() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionLattice)
  SharedDtor();
}

void RecognitionLattice::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void RecognitionLattice::ArenaDtor(void* object) {
  RecognitionLattice* _this = reinterpret_cast< RecognitionLattice* >(object);
  (void)_this;
}
void RecognitionLattice::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognitionLattice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognitionLattice::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionLattice& RecognitionLattice::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognitionLattice* RecognitionLattice::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognitionLattice>(arena);
}

void RecognitionLattice::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionLattice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  final_nodes_.Clear();
  edges_.Clear();
  _internal_metadata_.Clear();
}

bool RecognitionLattice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognitionLattice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 final_nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_final_nodes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_final_nodes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognitionLattice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognitionLattice)
  return false;
#undef DO_
}

void RecognitionLattice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognitionLattice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 final_nodes = 1;
  if (this->final_nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _final_nodes_cached_byte_size_));
  }
  for (int i = 0, n = this->final_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->final_nodes(i), output);
  }

  // repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edges(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognitionLattice)
}

::google::protobuf::uint8* RecognitionLattice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionLattice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 final_nodes = 1;
  if (this->final_nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _final_nodes_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->final_nodes_, target);
  }

  // repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edges(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionLattice)
  return target;
}

size_t RecognitionLattice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionLattice)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 final_nodes = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->final_nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _final_nodes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->edges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognitionLattice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionLattice)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionLattice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionLattice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionLattice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionLattice)
    MergeFrom(*source);
  }
}

void RecognitionLattice::MergeFrom(const RecognitionLattice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionLattice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  final_nodes_.MergeFrom(from.final_nodes_);
  edges_.MergeFrom(from.edges_);
}

void RecognitionLattice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionLattice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionLattice::CopyFrom(const RecognitionLattice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionLattice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionLattice::IsInitialized() const {
  return true;
}

void RecognitionLattice::Swap(RecognitionLattice* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionLattice* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionLattice::UnsafeArenaSwap(RecognitionLattice* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionLattice::InternalSwap(RecognitionLattice* other) {
  using std::swap;
  final_nodes_.InternalSwap(&other->final_nodes_);
  edges_.InternalSwap(&other->edges_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognitionLattice::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognitionLattice

// repeated int32 final_nodes = 1;
int RecognitionLattice::final_nodes_size() const {
  return final_nodes_.size();
}
void RecognitionLattice::clear_final_nodes() {
  final_nodes_.Clear();
}
::google::protobuf::int32 RecognitionLattice::final_nodes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionLattice.final_nodes)
  return final_nodes_.Get(index);
}
void RecognitionLattice::set_final_nodes(int index, ::google::protobuf::int32 value) {
  final_nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionLattice.final_nodes)
}
void RecognitionLattice::add_final_nodes(::google::protobuf::int32 value) {
  final_nodes_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionLattice.final_nodes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecognitionLattice::final_nodes() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionLattice.final_nodes)
  return final_nodes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecognitionLattice::mutable_final_nodes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionLattice.final_nodes)
  return &final_nodes_;
}

// repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
int RecognitionLattice::edges_size() const {
  return edges_.size();
}
void RecognitionLattice::clear_edges() {
  edges_.Clear();
}
const ::google::cloud::speech::v1::LatticeEdge& RecognitionLattice::edges(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionLattice.edges)
  return edges_.Get(index);
}
::google::cloud::speech::v1::LatticeEdge* RecognitionLattice::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionLattice.edges)
  return edges_.Mutable(index);
}
::google::cloud::speech::v1::LatticeEdge* RecognitionLattice::add_edges() {
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionLattice.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::LatticeEdge >*
RecognitionLattice::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionLattice.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::LatticeEdge >&
RecognitionLattice::edges() const {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionLattice.edges)
  return edges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatticeEdge::kStartNodeFieldNumber;
const int LatticeEdge::kEndNodeFieldNumber;
const int LatticeEdge::kSymbolFieldNumber;
const int LatticeEdge::kLanguageCostFieldNumber;
const int LatticeEdge::kAcousticCostFieldNumber;
const int LatticeEdge::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatticeEdge::LatticeEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictation_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.LatticeEdge)
}
LatticeEdge::LatticeEdge(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LatticeEdge)
}
LatticeEdge::LatticeEdge(const LatticeEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_node_, &from.start_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&start_node_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LatticeEdge)
}

void LatticeEdge::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&start_node_)) + sizeof(duration_));
  _cached_size_ = 0;
}

LatticeEdge::~LatticeEdge() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LatticeEdge)
  SharedDtor();
}

void LatticeEdge::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void LatticeEdge::ArenaDtor(void* object) {
  LatticeEdge* _this = reinterpret_cast< LatticeEdge* >(object);
  (void)_this;
}
void LatticeEdge::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LatticeEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatticeEdge::descriptor() {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatticeEdge& LatticeEdge::default_instance() {
  protobuf_dictation_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatticeEdge* LatticeEdge::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LatticeEdge>(arena);
}

void LatticeEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LatticeEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&start_node_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool LatticeEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.LatticeEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 start_node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.LatticeEdge.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float language_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &language_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acoustic_cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acoustic_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.LatticeEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.LatticeEdge)
  return false;
#undef DO_
}

void LatticeEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.LatticeEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_node = 1;
  if (this->start_node() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_node(), output);
  }

  // int32 end_node = 2;
  if (this->end_node() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_node(), output);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.LatticeEdge.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // float language_cost = 4;
  if (this->language_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->language_cost(), output);
  }

  // float acoustic_cost = 5;
  if (this->acoustic_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->acoustic_cost(), output);
  }

  // int32 duration = 6;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.LatticeEdge)
}

::google::protobuf::uint8* LatticeEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LatticeEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_node = 1;
  if (this->start_node() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_node(), target);
  }

  // int32 end_node = 2;
  if (this->end_node() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_node(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.LatticeEdge.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // float language_cost = 4;
  if (this->language_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->language_cost(), target);
  }

  // float acoustic_cost = 5;
  if (this->acoustic_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->acoustic_cost(), target);
  }

  // int32 duration = 6;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LatticeEdge)
  return target;
}

size_t LatticeEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LatticeEdge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // int32 start_node = 1;
  if (this->start_node() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_node());
  }

  // int32 end_node = 2;
  if (this->end_node() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_node());
  }

  // float language_cost = 4;
  if (this->language_cost() != 0) {
    total_size += 1 + 4;
  }

  // float acoustic_cost = 5;
  if (this->acoustic_cost() != 0) {
    total_size += 1 + 4;
  }

  // int32 duration = 6;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatticeEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.LatticeEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const LatticeEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatticeEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.LatticeEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.LatticeEdge)
    MergeFrom(*source);
  }
}

void LatticeEdge::MergeFrom(const LatticeEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LatticeEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.start_node() != 0) {
    set_start_node(from.start_node());
  }
  if (from.end_node() != 0) {
    set_end_node(from.end_node());
  }
  if (from.language_cost() != 0) {
    set_language_cost(from.language_cost());
  }
  if (from.acoustic_cost() != 0) {
    set_acoustic_cost(from.acoustic_cost());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void LatticeEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.LatticeEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeEdge::CopyFrom(const LatticeEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LatticeEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeEdge::IsInitialized() const {
  return true;
}

void LatticeEdge::Swap(LatticeEdge* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LatticeEdge* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LatticeEdge::UnsafeArenaSwap(LatticeEdge* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LatticeEdge::InternalSwap(LatticeEdge* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  swap(start_node_, other->start_node_);
  swap(end_node_, other->end_node_);
  swap(language_cost_, other->language_cost_);
  swap(acoustic_cost_, other->acoustic_cost_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatticeEdge::GetMetadata() const {
  protobuf_dictation_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dictation_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatticeEdge

// int32 start_node = 1;
void LatticeEdge::clear_start_node() {
  start_node_ = 0;
}
::google::protobuf::int32 LatticeEdge::start_node() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LatticeEdge.start_node)
  return start_node_;
}
void LatticeEdge::set_start_node(::google::protobuf::int32 value) {
  
  start_node_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LatticeEdge.start_node)
}

// int32 end_node = 2;
void LatticeEdge::clear_end_node() {
  end_node_ = 0;
}
::google::protobuf::int32 LatticeEdge::end_node() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LatticeEdge.end_node)
  return end_node_;
}
void LatticeEdge::set_end_node(::google::protobuf::int32 value) {
  
  end_node_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LatticeEdge.end_node)
}

// string symbol = 3;
void LatticeEdge::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LatticeEdge::symbol() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LatticeEdge.symbol)
  return symbol_.Get();
}
void LatticeEdge::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LatticeEdge.symbol)
}
#if LANG_CXX11
void LatticeEdge::set_symbol(::std::string&& value) {
  
  symbol_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.speech.v1.LatticeEdge.symbol)
}
#endif
void LatticeEdge::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.speech.v1.LatticeEdge.symbol)
}
void LatticeEdge::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.speech.v1.LatticeEdge.symbol)
}
::std::string* LatticeEdge::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LatticeEdge.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LatticeEdge::release_symbol() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LatticeEdge.symbol)
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LatticeEdge::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.LatticeEdge.symbol)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LatticeEdge::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LatticeEdge.symbol)
}
void LatticeEdge::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LatticeEdge.symbol)
}

// float language_cost = 4;
void LatticeEdge::clear_language_cost() {
  language_cost_ = 0;
}
float LatticeEdge::language_cost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LatticeEdge.language_cost)
  return language_cost_;
}
void LatticeEdge::set_language_cost(float value) {
  
  language_cost_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LatticeEdge.language_cost)
}

// float acoustic_cost = 5;
void LatticeEdge::clear_acoustic_cost() {
  acoustic_cost_ = 0;
}
float LatticeEdge::acoustic_cost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LatticeEdge.acoustic_cost)
  return acoustic_cost_;
}
void LatticeEdge::set_acoustic_cost(float value) {
  
  acoustic_cost_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LatticeEdge.acoustic_cost)
}

// int32 duration = 6;
void LatticeEdge::clear_duration() {
  duration_ = 0;
}
::google::protobuf::int32 LatticeEdge::duration() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LatticeEdge.duration)
  return duration_;
}
void LatticeEdge::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LatticeEdge.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
